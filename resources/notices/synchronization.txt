A critical section is a block of code that accesses a shared resource and can't be executed by more than one
thread at the same time.

When a thread wants access to a critical section, it uses one of those synchronization mechanisms:
	>> The keyword synchronized
	>> The Lock interface and its implementations
 
to find out if there is any other thread executing the critical section. 

If not, the thread enters the critical section. Otherwise, the thread is suspended by the synchronization mechanism 
until the thread that is executing the critical section ends it. 

When more than one thread is waiting for a thread to finish the execution of a critical section, 
the JVM chooses one of them, and the rest wait for their turn.

Synchronizing methods
------------------------------

Non-static methods: 

Only one execution thread will access one of the methods of an object declared with the synchronized keyword

If another thread tries to access any method declared with the synchronized keyword of the same object, 
it will be suspended until the first thread finishes the execution of the method.

Every method declared with the synchronized keyword is a critical section and Java only allows the execution 
of one of the critical sections of an object.

Static methods: 

Only one execution thread will access one of the static
methods declared with the synchronized keyword, but another thread can access other nonstatic methods
of an object of that class.


synchronized block by this : try to short synchronization point 

Conditions in synchronized code
---------------------------------
Object:
wait() 
If Thread calls the wait() method outside a synchronized block of code, 
the JVM throws an IllegalMonitorStateException exceptio

When the thread calls the wait() method, the JVM:
- puts the thread to sleep 
- releases the object that controls the synchronized block of code 
  (allows the other threads to execute other blocks of synchronized code protected by that object)
   To wake up the thread, call the notify() or notifyAll() method inside a block of code protected by the same object.

notify()
notifyAll()

Synchronizing a block of code with a Lock
------------------------------------------------

Lock features: 
- tryLock() method (tries to get the control of the lock and if it can't, because it's used by
					other thread, it returns the lock)
lock/tryLock/lockInterruptibly					
- separation on readers (multiple) and writers (single) threads
- better performance


When we want to implement a critical section using locks and guarantee that only one execution thread
runs a block of code, we have to create a ReentrantLock object.

At the beginning of the critical section, we have to get the control of the lock using the lock() method. 
When a thread (A) calls this method, if no other thread has the control of the lock, the method gives
the thread (A) the control of the lock and returns immediately to permit the execution of the
critical section to this thread. 

Otherwise, if there is another thread (B) executing the critical section controlled by this lock, 
the lock() method puts the thread (A) to sleep until the thread (B) finishes the execution of the critical section.

If you don't call the unlock() method at the end of the critical section, the other threads that are waiting for that block
will be waiting forever, causing a deadlock situation.

The Lock interface (and the ReentrantLock class) includes another method to get the control of the lock. 
It's the tryLock() method. The biggest difference with the lock() method is that this method, 
if the thread that uses it can't get the control of the Lock interface, 
returns immediately and doesn't put the thread to sleep. This method returns a boolean value, 
true if the thread gets the control of the lock, and false if not.

The ReentrantLock class also allows the use of recursive calls. When a thread has the
control of a lock and makes a recursive call, it continues with the control of the lock, so the
calling to the lock() method will return immediately and the thread will continue with the
execution of the recursive call. Moreover, we can also call other methods.

Dead Lock: 
------------------------------------

A thread (A) locks a Lock (X) and a thread (B) locks a Lock (Y). If now, the thread
(A) tries to lock the Lock (Y) and the thread (B) simultaneously tries to lock the Lock (X),
both threads will be blocked indefinitely, because they are waiting for locks that will never
be liberated.

Synchronizing data access with read/write locks
--------------------------------------------------

ReentrantReadWriteLock implements ReadWriteLock {...} has two locks, one for read operations and one for write operations 
There can be more than one thread using read operations simultaneously, 
but only one thread can be using write operations. 

Read lock obtained by readLock() method
Write lock obtained by writeLock() method

When a thread is doing a write operation, there can't be any thread doing
read operations.

When you get the read lock of a Lock interface, you can't modify the value of the variable

Lock fairness
---------------
	//false is default value	
	public ReentrantLock(boolean fair) {
        sync = fair ? new FairSync() : new NonfairSync();
    }
	
	public ReentrantReadWriteLock(boolean fair) {
        sync = fair ? new FairSync() : new NonfairSync();
        readerLock = new ReadLock(this);
        writerLock = new WriteLock(this);
    }
	
Lock condition
------------------

java.util.concurrent.locks.Condition {
	void await() throws InterruptedException;
	boolean await(long time, TimeUnit unit) throws InterruptedException;
	void signal();
	void signalAll();
}

java.util.concurrent.locks.Lock#newCondition


Conditions provide a means for one thread to  suspend execution (to wait) until notified by another
 thread that some state condition may now be true.  Because access to this shared state information occurs in different threads, it
  must be protected, so a lock of some form is associated with the
  condition. The key property that waiting for a condition provides
  is that it <em>atomically</em> releases the associated lock and
  suspends the current thread, just like {@code Object.wait}.
  
Synchronization Utilities
-------------------------

Semaphore - counter that controls the access to one or more shared resources.
CountDownLatch - allows a thread to wait for the finalization of multiple operations
CyclicBarrier - allows the synchronization of multiple threads in a common point
Phaser - controls the execution of concurrent tasks divided in phases
Exchanger - provides a point of data interchange between two threads


Semaphore
----------------

When a thread wants to access one of these shared resources, first, it must acquire the
semaphore. If the internal counter of the semaphore is greater than 0, the semaphore
decrements the counter and allows access to the shared resource. A counter bigger than 0
means there are free resources that can be used, so the thread can access and use one
of them.

Otherwise, if the counter of the semaphore is 0, the semaphore puts the thread to sleep until
the counter is greater than 0.

When the thread has finished the use of the shared resource, it must release the semaphore
so that the other thread can access the shared resource. That operation increases the
internal counter of the semaphore.

Semaphore(int permits, boolean fair)
acquire() - when the internal counter of the semaphore is 0, blocks the thread until the semaphore is released
acquireUninterruptibly() - ignores the interruption of the thread and doesn't throw any exceptions
						   if the current thread is {@linkplain Thread#interrupt interrupted}
							 while waiting for a permit then it will continue to wait, but the
							 time at which the thread is assigned a permit may change compared to
							 the time it would have received the permit had no interruption
							 occurred.  When the thread does return from this method its interrupt
							 status will be set.
tryAcquire() -  This method tries to acquire the semaphore. If it can, the method returns the true value. But if it can't, the method returns the false value instead of
				being blocked and waits for the release of the semaphore
				
release()

CountDownLatch
----------------------

This class is initialized with an integer number, which is the number of operations 
the threads are going to wait for. When a thread wants to wait for the execution of these operations, 
it uses the await() method. 
This method puts the thread to sleep until the operations are completed. When one of these
operations finishes, it uses the countDown() method to decrement the internal counter
When the counter arrives to 0, the class wakes up all the threads that were sleeping in the await() method.

controller = new CountDownLatch(number)
controller.await()
....
controller.countDown()

When the counter arrives to 0, all the calls to the await() method return immediately and 
all subsequent calls to the countDown() method have no effect.

- It is used to synchronize one or more threads with the execution of various tasks.
- It only admits one use (once counter of latch arrives at 0, have to do same synch again)


CyclicBarrier
---------------------------------
allows the synchronization of two or more threads in a determined point (CDL - also)

The CyclicBarrier class is initialized with an integer number, which is the number of threads
that will be synchronized in a determined point. 

When one of those threads arrives to the determined point, it calls the await() method to wait for the other threads. 
When the thread calls that method, the CyclicBarrier class blocks the thread that is sleeping until the other
threads arrive. 
When the last thread calls the await() method of the CyclicBarrier class, it wakes up all the threads that were waiting 
and continues with its job.

One interesting advantage of the CyclicBarrier class is that you can pass an additional
Runnable object as an initialization parameter, and the CyclicBarrier class executes this
object as a thread when all the threads have arrived to the common point. This characteristic
makes this class adequate for the parallelization of tasks using the divide and conquer
programming technique.

Difference with CDL:

	One of the most important differences is that a
	CyclicBarrier object can be reset to its initial state, assigning to its internal counter the
	value with which it was initialized.

	This reset operation can be done using the reset() method of the CyclicBarrier
	class. When this occurs, all the threads that were waiting in the await() method receive
	a BrokenBarrierException exception.


Broken: 

	When there are
	various threads waiting in the await() method and one of them is interrupted, this thread
	receives an InterruptedException exception, but the other threads that were waiting
	receive a BrokenBarrierException exception and CyclicBarrier is placed in the
	broken state.

	The CyclicBarrier class provides the isBroken() method, then returns true if the
	object is in the broken state; otherwise it returns false.

Phaser
----------------------
onAdvance() - a method that is executed each time the phaser changes the phase

param phase the current phase number on entry to this method, before this phaser is advanced
param registeredParties the current number of registered participants
return {@code true} if this phaser should terminate
The default implementation of this method returns true if the number of registered participants is zero, and false otherwise

protected boolean onAdvance(int phase, int registeredParties)

public int register() - add new participant. This calling doesn't establish a relation
between the Student object or the thread that executes it and the phaser. Really, the
number of participants in a phaser is only a number. There is no relationship between the
phaser and the participants.

arriveAndAwaitAdvance() - Arrives at this phaser and awaits others

The onAdvance() method returns a Boolean value that indicates if the phaser has
terminated or not. If the phaser returns a false value, it indicates that it hasn't terminated,
so the threads will continue with the execution of other phases

